labs(y = "Percent of Population Registered",x="") +
ggtitle("Do National IDs Help Register Citizens?") +
theme(axis.text  = element_text(color = "navyblue", size = 10),
axis.title = element_text(size = 10, color = "grey42"),
plot.title = element_text(color="royalblue4",
face="bold", size=12, hjust = .3),
legend.position = "top",
legend.direction = "horizontal",
legend.title=element_blank(),
legend.background = element_rect(colour = "black"),
legend.text = (hjust = -.7))
#Poorly Performing Registered countries
WB_Names <- WB_num
WB_Names$Country <- row.names(WB_Names)
Low <- filter(WB_Names,Reg.Pop.. <= 35)
Low[Low$NID_B == 0,7] <- "No NID"
Low[Low$NID_B == 1,7] <- "NID Not Issued at Birth"
Low[Low$NID_B == 2,7] <- "NID Issued at Birth"
ggplot(Low, aes(y=Reg.Pop.., x=reorder(Country, Reg.Pop..),
fill=NID_B)) +
geom_bar(size=2, shape = 15, stat = 'identity') +
coord_flip() +
scale_colour_brewer(palette = "Set2") +
labs(y = "Percent of Population Registered",x="") +
ggtitle("Do National IDs Help Register Citizens?") +
theme(axis.text  = element_text(color = "navyblue", size = 10),
axis.title = element_text(size = 10, color = "grey42"),
plot.title = element_text(color="royalblue4",
face="bold", size=12, hjust = .3),
legend.position = "top",
legend.direction = "horizontal",
legend.title=element_blank(),
legend.background = element_rect(colour = "black"),
legend.text = element_text(hjust = -.7))
#Poorly Performing Registered countries
WB_Names <- WB_num
WB_Names$Country <- row.names(WB_Names)
Low <- filter(WB_Names,Reg.Pop.. <= 35)
Low[Low$NID_B == 0,7] <- "No NID"
Low[Low$NID_B == 1,7] <- "NID Not Issued at Birth"
Low[Low$NID_B == 2,7] <- "NID Issued at Birth"
ggplot(Low, aes(y=Reg.Pop.., x=reorder(Country, Reg.Pop..),
fill=NID_B)) +
geom_bar(size=2, shape = 15, stat = 'identity') +
coord_flip() +
scale_colour_brewer(palette = "Set2") +
labs(y = "Percent of Population Registered",x="") +
ggtitle("Do National IDs Help Register Citizens?") +
theme(axis.text  = element_text(color = "navyblue", size = 10),
axis.title = element_text(size = 10, color = "grey42"),
plot.title = element_text(color="royalblue4",
face="bold", size=12, hjust = .5),
legend.position = "top",
legend.direction = "horizontal",
legend.title=element_blank(),
legend.background = element_rect(colour = "black"),
legend.text = element_text(hjust = .5))
ggplot(Low, aes(y=Reg.Pop.., x=reorder(Country, Reg.Pop..),
fill=NID_B)) +
geom_bar(size=2, shape = 15, stat = 'identity') +
coord_flip() +
scale_colour_brewer(palette = "Set2") +
labs(y = "Percent of Population Registered",x="") +
ggtitle("Do National IDs Help Register Citizens?") +
theme(axis.text  = element_text(color = "navyblue", size = 10),
axis.title = element_text(size = 10, color = "grey42"),
plot.title = element_text(color="royalblue4",
face="bold", size=12, hjust = .5),
legend.position = "top",
legend.direction = "horizontal",
legend.title=element_blank(),
legend.background = element_rect(colour = "black"),
legend.text = element_text(hjust = .5))+
scale_fill_manual(values=c("green4", "firebrick3"))
#Poorly Performing Registered countries
WB_Names <- WB_num
WB_Names$Country <- row.names(WB_Names)
Low <- filter(WB_Names,Reg.Pop.. <= 35)
Low[Low$NID_B == 0,7] <- "No NID"
Low[Low$NID_B == 1,7] <- "NID Not Issued at Birth"
Low[Low$NID_B == 2,7] <- "NID Issued at Birth"
ggplot(Low, aes(y=Reg.Pop.., x=reorder(Country, Reg.Pop..),
fill=NID_B)) +
geom_bar(size=2, shape = 15, stat = 'identity') +
coord_flip() +
scale_colour_brewer(palette = "Set2") +
labs(y = "Percent of Population Registered",x="") +
ggtitle("Do National IDs Help Register Citizens?") +
theme(axis.text  = element_text(color = "navyblue", size = 10),
axis.title = element_text(size = 10, color = "grey42"),
plot.title = element_text(color="royalblue4",
face="bold", size=12, hjust = .5),
legend.position = "top",
legend.direction = "horizontal",
legend.title=element_blank(),
legend.background = element_rect(colour = "black"),
legend.text = element_text(hjust = .5))+
scale_fill_manual(values=c("springgreen4", "slateblue"))
View(NID)
View(Reg_Pop)
View(WB_num)
Reg_Pop <- WB_num[,c(54,120,86)]
View(Reg_Pop)
Reg_Pop <- as.data.frame(Reg_Pop)
row.names(Reg_Pop) <- row.names(WB_num)
Reg_Pop$Country <- row.names(Reg_Pop)
Reg_Pop[Reg_Pop == ""] <- "Other"
Reg_Pop[Reg_Pop == "AFR"] <- "Africa"
Reg_Pop[Reg_Pop == "EAP"] <- "East Asia and Pacific"
Reg_Pop[Reg_Pop == "ECA"] <- "Europe and Central Asia"
Reg_Pop[Reg_Pop == "LCR"] <- "Latin America and Carribean"
Reg_Pop[Reg_Pop == "MNA"] <- "Middle East and North Africa"
Reg_Pop[Reg_Pop == "SAR"] <- "South Asia"
NID <- WB_num[,c(8,120)]
NID[NID == 0] <- "No National ID"
NID[NID == 1] <- "NID, Not Issued at Birth"
NID[NID== 2] <- "NID, Issued at Birth"
NID <- as.data.frame(NID)
NID <- NID[-199,]
NID <- as.data.frame(NID)
NID[NID == ""] <- "Other"
NID[NID == "AFR"] <- "Africa"
NID[NID == "EAP"] <- "East Asia and Pacific"
NID[NID == "ECA"] <- "Europe and Central Asia"
NID[NID == "LCR"] <- "Latin America and Carribean"
NID[NID == "MNA"] <- "Middle East and North Africa"
NID[NID == "SAR"] <- "South Asia"
ggplot(Free, aes(x = reorder(Country,ScoreP), y = ScoreP,
fill = Freedom)) +
geom_bar(width = .9, stat="identity") +
coord_polar(theta = "y") +
xlab("") + ylab("") +
labs(comment = "Source: World Bank")
geom_text(data = Free, hjust = 1, size = 3,
aes(x = Country, y = 0, label = Country)) +
theme(axis.text.y = element_blank(),
axis.ticks = element_blank()) +
scale_fill_manual(values=c("green4", "firebrick3", "goldenrod1")) +
ggtitle("Freedom Scores for Low Registration Countries (<30%)")
ggplot(Free, aes(x = reorder(Country,ScoreP), y = ScoreP,
fill = Freedom)) +
geom_bar(width = .9, stat="identity") +
coord_polar(theta = "y") +
xlab("") + ylab("") +
labs(comment = "Source: World Bank")+
geom_text(data = Free, hjust = 1, size = 3,
aes(x = Country, y = 0, label = Country)) +
theme(axis.text.y = element_blank(),
axis.ticks = element_blank()) +
scale_fill_manual(values=c("green4", "firebrick3", "goldenrod1")) +
ggtitle("Freedom Scores for Low Registration Countries (<30%)")
ggplot(BR_Pop, aes(x = Birth.Reg.. , y = Reg.Pop.. , color=CR.M)) +
geom_point()
ggplot(BR_Pop, aes(x = Birth.Reg.. , y = Reg.Pop..)) +
geom_point()
ggplot(Reg_Pop, aes(x = PovL...p. , y = Reg.Pop..)) +
geom_point()
ggplot(BR_Pop, aes(x = Birth.Reg.. , y = Reg.Pop..)) +
geom_point()
ggplot(Reg_Pop, aes(x = PovL...p. , y = Reg.Pop..)) +
geom_point() + geom_smooth(model = "lm")
ggplot(Reg_Pop, aes(x = PovL...p. , y = Reg.Pop..)) +
geom_point() + geom_smooth(method = "lm")
ggplot(Reg_Pop, aes(x = reorder(Region,Reg.Pop..), y=Reg.Pop..)) +
geom_boxplot()
ggplot(Reg_Pop, aes(x = reorder(Region,Reg.Pop..), y=Reg.Pop..)) +
geom_boxplot()
AFR <- mean(filter(Reg_Pop, Region == "Africa")$Reg.Pop..)
EAP <- mean(filter(Reg_Pop, Region == "East Asia and Pacific")$Reg.Pop..)
ECA <- mean(filter(Reg_Pop, Region == "Europe and Central Asia")$Reg.Pop..)
LCR <- mean(filter(Reg_Pop, Region == "Latin America and Carribean")$Reg.Pop..)
MNA <- mean(filter(Reg_Pop, Region == "Middle East and North Africa")$Reg.Pop..)
SAR <- mean(filter(Reg_Pop, Region == "South Asia")$Reg.Pop..)
AVG <- c(AFR,EAP,ECA,LCR,MNA,SAR)
AVG <- as.data.frame(AVG)
rownames(AVG) <- c("Africa","East Asia and Pacific","Europe and Central Asia","Latin America and Carribean","Middle East and North Africa","South Asia")
AVG$Region <- row.names(AVG)
ggplot(AVG, aes(x = reorder(Region, AVG), y=AVG)) +
geom_bar()
ggplot(Reg_Pop, aes(x = reorder(Region,Reg.Pop..), y=Reg.Pop..)) +
geom_boxplot()
AFR <- mean(filter(Reg_Pop, Region == "Africa")$Reg.Pop..)
EAP <- mean(filter(Reg_Pop, Region == "East Asia and Pacific")$Reg.Pop..)
ECA <- mean(filter(Reg_Pop, Region == "Europe and Central Asia")$Reg.Pop..)
LCR <- mean(filter(Reg_Pop, Region == "Latin America and Carribean")$Reg.Pop..)
MNA <- mean(filter(Reg_Pop, Region == "Middle East and North Africa")$Reg.Pop..)
SAR <- mean(filter(Reg_Pop, Region == "South Asia")$Reg.Pop..)
AVG <- c(AFR,EAP,ECA,LCR,MNA,SAR)
AVG <- as.data.frame(AVG)
rownames(AVG) <- c("Africa","East Asia and Pacific","Europe and Central Asia","Latin America and Carribean","Middle East and North Africa","South Asia")
AVG$Region <- row.names(AVG)
ggplot(AVG, aes(x = reorder(Region, AVG), y=AVG)) +
geom_bar(stat = "identity")
ggplot(Free, aes(x = reorder(Country,ScoreP), y = ScoreP,
fill = Freedom)) +
geom_bar(width = .9, stat="identity") +
coord_polar(theta = "y") +
xlab("") + ylab("") +
labs(caption = "Source: World Bank")+
geom_text(data = Free, hjust = 1, size = 3,
aes(x = Country, y = 0, label = Country)) +
theme(axis.text.y = element_blank(),
axis.ticks = element_blank()) +
scale_fill_manual(values=c("green4", "firebrick3", "goldenrod1")) +
ggtitle("Freedom Scores for Low Registration Countries (<30%)")
Library(devtools)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
library(dplyr)
library(ggplot2)
library(ggmap)
library(rgdal)
airbnb <- read.csv("airbnb_listings.csv")
airbnb <- read.csv("airbnb_listings.csv")
airbnb <- read.csv("airbnb_listings.csv")
nyc <- readOGR("/Users/samgass/GitHub/QMSS-G4063-Data-Visualization/Assignments/Assignment 2/nyc_boroughs_map","nybb")
sub_ent <- readOGR("/Users/samgass/GitHub/QMSS-G4063-Data-Visualization/Assignments/Assignment 2/nyc_subway_map/entrances_nyc_subway","subway_entrances_may2016")
sub_routes <- readOGR("/Users/samgass/GitHub/QMSS-G4063-Data-Visualization/Assignments/Assignment 2/nyc_subway_map/routes_nyc_subway","routes_nyc_subway_jan2017")
sub_stop <- readOGR("/Users/samgass/GitHub/QMSS-G4063-Data-Visualization/Assignments/Assignment 2/nyc_subway_map/stops_nyc_subway","stops_nyc_subway_jan2017")
nyc <- spTransform(nyc, CRS("+proj=longlat +datum=WGS84"))
nyc <- fortify(nyc)
man<- get_map("Manhattan", zoom=12,
source="stamen",maptype="toner-background")
map <- ggmap(man) +
geom_polygon(aes(x=long, y=lat, group=group, fill=id),
size=0.5, color='blue', data=nyc) + theme(legend.position = "none")
install.packages(c("broom", "chron", "data.table", "forecast", "ggthemes", "gss", "jsonlite", "lmtest", "maptools", "mvtnorm", "NLP", "party", "statmod", "stringr", "swirl", "tm", "topicmodels", "tseries"))
knitr::opts_chunk$set(echo = TRUE)
map <- ggmap(man) +
geom_polygon(aes(x=long, y=lat, group=group, fill=id),
size=0.5, color='blue', data=nyc) + theme(legend.position = "none")
library(dplyr)
library(ggplot2)
library(ggmap)
library(rgdal)
map <- ggmap(man) +
geom_polygon(aes(x=long, y=lat, group=group, fill=id),
size=0.5, color='blue', data=nyc) + theme(legend.position = "none")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(ggmap)
library(rgdal)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
devtools::install_github("dkahle/ggmap"), force = TRUE
devtools::install_github("dkahle/ggmap", force = TRUE)
devtools::install_github("hadley/ggplot2", force = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(ggmap)
library(rgdal)
nyc <- readOGR("/Users/samgass/GitHub/QMSS-G4063-Data-Visualization/Assignments/Assignment 2/nyc_boroughs_map","nybb")
sub_ent <- readOGR("/Users/samgass/GitHub/QMSS-G4063-Data-Visualization/Assignments/Assignment 2/nyc_subway_map/entrances_nyc_subway","subway_entrances_may2016")
sub_routes <- readOGR("/Users/samgass/GitHub/QMSS-G4063-Data-Visualization/Assignments/Assignment 2/nyc_subway_map/routes_nyc_subway","routes_nyc_subway_jan2017")
sub_stop <- readOGR("/Users/samgass/GitHub/QMSS-G4063-Data-Visualization/Assignments/Assignment 2/nyc_subway_map/stops_nyc_subway","stops_nyc_subway_jan2017")
nyc <- spTransform(nyc, CRS("+proj=longlat +datum=WGS84"))
nyc <- fortify(nyc)
man<- get_map("Manhattan", zoom=12,
source="stamen",maptype="toner-background")
map <- ggmap(man)
map <- ggmap(man) +
geom_polygon(aes(x=long, y=lat, group=group, fill=id)
map <- ggmap(man) +
map <- ggmap(man) +
geom_polygon(aes(x=long, y=lat, group=group, fill=id),
size=0.5, color='blue', data=nyc)
map <- ggmap(man) +
geom_polygon(aes(x=long, y=lat, group=group, fill=id),
size=0.5, color='blue', data=nyc) + theme(legend.position = "none")
map <- ggmap(man) +
geom_polygon(aes(x=long, y=lat, group=group, fill=id),
size=0.5, color='blue', data=nyc) + theme(legend.position = "none")
map <- ggmap(man)
man<- get_map("Manhattan", zoom=12,
source="stamen",maptype="toner-background")
map <- ggmap(man)
map <- ggmap(man) +
geom_polygon(aes(x=long, y=lat, group=group, fill=id),
size=0.5, color='blue', data=nyc) + theme(legend.position = "none")
knitr::opts_knit$set(root.dir = '/Users/samgass/Documents/Columbia/Spring 2017/Advanced Analytic Techniques/Labs/Lab 2')
library(tm)
library(lsa)
library(tidyverse)
library(tidytext)
library(stringr)
library(SnowballC)
library(RTextTools)
library(topicmodels)
library(quanteda)
library(ggplot2)
library(ggthemes)
library(tm)
library(lsa)
library(tidyverse)
library(tidytext)
library(stringr)
library(SnowballC)
library(RTextTools)
library(topicmodels)
library(quanteda)
library(ggplot2)
library(ggthemes)
library(tidyr)
library(reshape)
library(ggmap)
library(rgdal)
library(tmap)
US <- get_map("United States", zoom=11, source="stamen", maptype="toner-background")
View(US)
US
ggmap(US)
ggmap(US)
t <- ggmap(US)
t
setwd("~/GitHub/final-project-team-america/data")
library(tm)
library(lsa)
library(tidyverse)
library(tidytext)
library(stringr)
library(SnowballC)
library(RTextTools)
library(topicmodels)
library(quanteda)
library(ggplot2)
library(ggthemes)
library(tidyr)
library(reshape)
library(ggmap)
library(rgdal)
library(tmap)
#Loading Meta Data
meta <- read.csv("meta_data_with_lat_lon.csv")
meta$date <- as.Date(meta$date, "%d-%B-%y")
meta$title <- as.character(meta$title)
meta$location <- as.character(meta$location)
meta [62,3] <- "Washington, District of Columbia"
meta [31,3] <- "Washington, District of Columbia"
meta [70,3] <- "Washington, District of Columbia"
meta [68,3] <- "Gettysburg, Pennsylvania"
meta [30,3] <- "Detroit, Michigan"
meta [29,3] <- "New York, New York"
meta [3,3] <- "New York, New York"
meta [10,3] <- "New York, New York"
meta [7,3] <- "New York, New York"
meta [55,3] <- "New York, New York"
meta <- meta[order(as.Date(meta$date)),]
meta <- meta[!duplicated(meta$title),]
#Creating Corpus
corpus <- VCorpus(DirSource(directory = "text"))
corpus_tidy <- as.data.frame(tidy(corpus))
colnames(corpus_tidy)[5] <- "title"
corpus_tidy <- corpus_tidy[,c(5,8)]
sort_data <- meta[,1:2]
corpus_tidy$text <- as.character(corpus_tidy$text)
corpus_tidy$title <- as.character(corpus_tidy$title)
sort_data$title <- as.character(sort_data$title)
corpus_tidy <- as.data.frame(sapply(corpus_tidy, function(x) gsub(".txt", "", x)))
corpus_tidy$title <- as.character(corpus_tidy$title)
corpus_tidy <- left_join(corpus_tidy, sort_data, by = c("title"))
corpus_tidy <- corpus_tidy[order(as.Date(corpus_tidy$date)),]
corpus_tidy_text <- as.data.frame(corpus_tidy[,2])
corpus <- Corpus(DataframeSource(corpus_tidy_text))
#Attaching Meta Data
meta(corpus, "id", type = "local") <- meta$title
meta(corpus, "date", type = "local") <- meta$date
meta(corpus, "location", type = "local") <- meta$location
#Full Data Frame w/meta
corpus_tidy <- right_join(corpus_tidy, meta, by = c("title", "date"))
#Add State Data
state_data <- read.csv("State_Data_healthindx_added.csv")
corpus_tidy$location <- as.character(corpus_tidy$location)
corpus_tidy <- separate(data = corpus_tidy, col = location, into = c("City", "State"), sep = ",")
colnames(state_data)[1] <- "State"
state_data$State <- as.character(lapply(state_data$State, function(x) paste("",x, sep=" ")))
corpus_tidy <- left_join(corpus_tidy, state_data, by = c("State"))
#Creating DTM
words <- c("applause", "trump")
clean_corpus <- function(corpus){
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removeWords, c(stopwords("english")))
corpus <- tm_map(corpus, removeWords, c(words))
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
corpus_clean <- clean_corpus(corpus)
corpus_dtm <- DocumentTermMatrix(corpus_clean)
dtm_df <- tidy(corpus_dtm)
colnames(dtm_df)[1] <- "title"
dtm_df <- left_join(dtm_df, corpus_tidy[,-2], by = "title")
#Plotting Some Common Words
dtm_df %>% top_n(n = 20, wt = count) %>%
ggplot(aes(term, count)) + geom_bar(stat = "identity")
dtm_df %>% filter(State == " Arizona") %>% top_n(n = 20, wt = count) %>%
ggplot(aes(term, count)) + geom_bar(stat = "identity") + coord_flip()
dtm_df %>% filter(median_household_income < 40000) %>% top_n(n = 20, wt = count) %>%
ggplot(aes(term, count)) + geom_bar(stat = "identity") + coord_flip()
dtm_df %>% filter(median_household_income > 55000) %>% top_n(n = 20, wt = count) %>%
ggplot(aes(term, count)) + geom_bar(stat = "identity") + coord_flip()
#Sentiment
pos <- read.table("positive-words.txt", as.is=T)
neg <- read.table("negative-words.txt", as.is=T)
sentiment <- function(words){
require(quanteda)
tok <- quanteda::tokenize(words)
pos.count <- sum(tok[[1]]%in%pos[,1])
cat("\n positive words:",tok[[1]][which(tok[[1]]%in%pos[,1])],"\n")
neg.count <- sum(tok[[1]]%in%neg[,1])
cat("\n negative words:",tok[[1]][which(tok[[1]]%in%neg[,1])],"\n")
out <- (pos.count - neg.count)/(pos.count+neg.count)
return(out)
}
corpus_tidy$text <- as.character(corpus_tidy$text)
corpus_tidy$sentiment <- NA
for (i in 1:nrow(corpus_tidy)){
corpus_tidy[i,22] <- sentiment(corpus_tidy[i,2])
}
#Plotting Sentiment Examples
corpus_tidy$date <- as.Date(corpus_tidy$date)
ggplot(corpus_tidy[-1,], aes(x = date, y = sentiment)) +
geom_point(aes(fill = State), shape = 21, size = 2,
stroke = 1.3, alpha = .6) +
geom_smooth(se = FALSE) +
theme_fivethirtyeight() +
scale_color_tableau()
ggplot(corpus_tidy[-1,], aes(x = date, y = sentiment)) +
geom_point(aes(size = Health.Index), shape = 21,
stroke = 1.3, alpha = .6, fill = "red") +
geom_smooth(se = FALSE) +
theme_fivethirtyeight() +
scale_color_tableau()
#Mapping
xyz <- corpus_tidy[,c(7,8)]
trump_loc <- SpatialPointsDataFrame(coords = xyz, data = corpus_tidy[,-2], proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
sub_stop <- readOGR("/Users/samgass/GitHub/final-project-team-america/data/us shape",
"states")
tm_shape(sub_stop) + tm_fill()
tm_shape(sub_stop) + tm_fill() + tm_shape(trump_loc) + tm_dots(col = "red", size = .6)
tm_shape(sub_stop) + tm_fill() + tm_shape(trump_loc) + tm_dots(col = "red", size = 4)
trump_loc <- SpatialPointsDataFrame(coords = xyz, data = corpus_tidy[,-2], proj4string = CRS("+proj=longlat +datum=WGS84"))
tm_shape(sub_stop) + tm_fill() + tm_shape(trump_loc) + tm_dots(col = "red", size = 4)
tm_shape(sub_stop) + tm_fill() + tm_shape(trump_loc) + tm_dots(col = "red", size = 4)
US <- get_map("United States", zoom=11, source="stamen", maptype="toner-background")
ggmap(US)
t <- ggmap(US)
install.packages("ggmap")
install.packages("ggmap")
US <- get_map("United States", zoom=11, source="stamen", maptype="toner-background")
library(tm)
library(lsa)
library(tidyverse)
library(tidytext)
library(stringr)
library(SnowballC)
library(RTextTools)
library(topicmodels)
library(quanteda)
library(ggplot2)
library(ggthemes)
library(tidyr)
library(reshape)
library(ggmap)
library(rgdal)
library(tmap)
US <- get_map("United States", zoom=11, source="stamen", maptype="toner-background")
t <- ggmap(US)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
library(ggmap)
remove.packages("ggmap")
install.packages("ggmap", type = "source")
library(ggmap)
remove.packages("ggmap")
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2", force = T)
library(ggmap)
remove.packages("ggmap")
remove.packages("ggplot2")
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
library(ggplot2)
library(ggmap)
install.packages("ggmap", type = "source")
library(ggmap)
library(ggplot2)
ggplot(corpus_tidy[-1,], aes(x = date, y = sentiment)) +
geom_point(aes(size = Health.Index), shape = 21,
stroke = 1.3, alpha = .6, fill = "red") +
geom_smooth(se = FALSE) +
theme_fivethirtyeight() +
scale_color_tableau()
remove.packages("ggplot2")
install.packages('ggplot2')
library(ggplot2)
ggplot(corpus_tidy[-1,], aes(x = date, y = sentiment)) +
geom_point(aes(size = Health.Index), shape = 21,
stroke = 1.3, alpha = .6, fill = "red") +
geom_smooth(se = FALSE) +
theme_fivethirtyeight() +
scale_color_tableau()
remove.packages("ggmap")
ggplot(corpus_tidy[-1,], aes(x = date, y = sentiment)) +
geom_point(aes(size = Health.Index), shape = 21,
stroke = 1.3, alpha = .6, fill = "red") +
geom_smooth(se = FALSE) +
theme_fivethirtyeight() +
scale_color_tableau()
remove.packages("ggplot2")
